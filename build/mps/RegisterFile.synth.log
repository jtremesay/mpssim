
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.16 (git sha1 yosys-0.16, gcc 11.3.0 -fPIC -Os)


-- Parsing `rtl/mps/RegisterFile.v' using frontend ` -vlog2k' --

1. Executing Verilog-2005 frontend: rtl/mps/RegisterFile.v
Parsing Verilog input from `rtl/mps/RegisterFile.v' to AST representation.
Storing AST representation for module `$abstract\RegisterFile'.
Successfully finished Verilog frontend.

-- Running command `prep -top RegisterFile' --

2. Executing PREP pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\RegisterFile'.
Generating RTLIL representation for module `\RegisterFile'.
Warning: Replacing memory \data with list of registers. See rtl/mps/RegisterFile.v:12

2.2.1. Analyzing design hierarchy..
Top module:  \RegisterFile

2.2.2. Analyzing design hierarchy..
Top module:  \RegisterFile
Removing unused module `$abstract\RegisterFile'.
Removed 1 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$rtl/mps/RegisterFile.v:0$20 in module RegisterFile.
Marked 1 switch rules as full_case in process $proc$rtl/mps/RegisterFile.v:0$17 in module RegisterFile.
Marked 1 switch rules as full_case in process $proc$rtl/mps/RegisterFile.v:10$10 in module RegisterFile.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 4 assignments to connections.

2.3.4. Executing PROC_INIT pass (extract init attributes).

2.3.5. Executing PROC_ARST pass (detect async resets in processes).

2.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\RegisterFile.$proc$rtl/mps/RegisterFile.v:0$20'.
     1/1: $1$mem2reg_rd$\data$rtl/mps/RegisterFile.v:9$2_DATA[30:0]$22
Creating decoders for process `\RegisterFile.$proc$rtl/mps/RegisterFile.v:0$17'.
     1/1: $1$mem2reg_rd$\data$rtl/mps/RegisterFile.v:8$1_DATA[30:0]$19
Creating decoders for process `\RegisterFile.$proc$rtl/mps/RegisterFile.v:10$10'.
     1/7: $1$mem2reg_wr$\data$rtl/mps/RegisterFile.v:12$3_ADDR[2:0]$15
     2/7: $1$mem2reg_wr$\data$rtl/mps/RegisterFile.v:12$3_DATA[30:0]$16
     3/7: $0\data[4][30:0]
     4/7: $0\data[3][30:0]
     5/7: $0\data[2][30:0]
     6/7: $0\data[1][30:0]
     7/7: $0\data[0][30:0]

2.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\RegisterFile.$mem2reg_rd$\data$rtl/mps/RegisterFile.v:9$2_DATA' from process `\RegisterFile.$proc$rtl/mps/RegisterFile.v:0$20'.
No latch inferred for signal `\RegisterFile.$mem2reg_rd$\data$rtl/mps/RegisterFile.v:8$1_DATA' from process `\RegisterFile.$proc$rtl/mps/RegisterFile.v:0$17'.
No latch inferred for signal `\RegisterFile.$mem2reg_wr$\data$rtl/mps/RegisterFile.v:12$3_ADDR' from process `\RegisterFile.$proc$rtl/mps/RegisterFile.v:10$10'.
No latch inferred for signal `\RegisterFile.$mem2reg_wr$\data$rtl/mps/RegisterFile.v:12$3_DATA' from process `\RegisterFile.$proc$rtl/mps/RegisterFile.v:10$10'.
Latch inferred for signal `\RegisterFile.\data[0]' from process `\RegisterFile.$proc$rtl/mps/RegisterFile.v:10$10': $auto$proc_dlatch.cc:427:proc_dlatch$100
Latch inferred for signal `\RegisterFile.\data[1]' from process `\RegisterFile.$proc$rtl/mps/RegisterFile.v:10$10': $auto$proc_dlatch.cc:427:proc_dlatch$117
Latch inferred for signal `\RegisterFile.\data[2]' from process `\RegisterFile.$proc$rtl/mps/RegisterFile.v:10$10': $auto$proc_dlatch.cc:427:proc_dlatch$134
Latch inferred for signal `\RegisterFile.\data[3]' from process `\RegisterFile.$proc$rtl/mps/RegisterFile.v:10$10': $auto$proc_dlatch.cc:427:proc_dlatch$151
Latch inferred for signal `\RegisterFile.\data[4]' from process `\RegisterFile.$proc$rtl/mps/RegisterFile.v:10$10': $auto$proc_dlatch.cc:427:proc_dlatch$168

2.3.8. Executing PROC_DFF pass (convert process syncs to FFs).

2.3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\RegisterFile.$proc$rtl/mps/RegisterFile.v:0$20'.
Removing empty process `RegisterFile.$proc$rtl/mps/RegisterFile.v:0$20'.
Found and cleaned up 1 empty switch in `\RegisterFile.$proc$rtl/mps/RegisterFile.v:0$17'.
Removing empty process `RegisterFile.$proc$rtl/mps/RegisterFile.v:0$17'.
Found and cleaned up 2 empty switches in `\RegisterFile.$proc$rtl/mps/RegisterFile.v:10$10'.
Removing empty process `RegisterFile.$proc$rtl/mps/RegisterFile.v:10$10'.
Cleaned up 4 empty switches.

2.3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module RegisterFile.
<suppressed ~43 debug messages>

2.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module RegisterFile.

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \RegisterFile..
Removed 7 unused cells and 69 unused wires.
<suppressed ~10 debug messages>

2.6. Executing CHECK pass (checking for obvious problems).
Checking module RegisterFile...
Found and reported 0 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module RegisterFile.

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\RegisterFile'.
Removed a total of 0 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \RegisterFile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \RegisterFile.
Performed a total of 0 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\RegisterFile'.
Removed a total of 0 cells.

2.7.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \RegisterFile..

2.7.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module RegisterFile.

2.7.8. Finished OPT passes. (There is nothing left to do.)

2.8. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 32) from mux cell RegisterFile.$ternary$rtl/mps/RegisterFile.v:8$6 ($mux).
Removed top 1 bits (of 32) from mux cell RegisterFile.$ternary$rtl/mps/RegisterFile.v:9$9 ($mux).
Removed top 1 bits (of 3) from port B of cell RegisterFile.$procmux$26_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell RegisterFile.$procmux$27_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell RegisterFile.$procmux$28_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell RegisterFile.$procmux$33_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell RegisterFile.$procmux$34_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell RegisterFile.$procmux$35_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell RegisterFile.$procmux$51_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell RegisterFile.$procmux$58_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell RegisterFile.$procmux$66_CMP0 ($eq).

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \RegisterFile..

2.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.11. Executing OPT pass (performing simple optimizations).

2.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module RegisterFile.

2.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\RegisterFile'.
Removed a total of 0 cells.

2.11.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \RegisterFile..

2.11.4. Finished fast OPT passes.

2.12. Printing statistics.

=== RegisterFile ===

   Number of wires:                 49
   Number of wire bits:            364
   Number of public wires:          12
   Number of public wire bits:     267
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 44
     $and                            5
     $dlatch                         5
     $eq                            12
     $logic_and                      1
     $logic_not                      5
     $mux                            2
     $not                            6
     $pmux                           2
     $reduce_bool                    1
     $reduce_or                      5

2.13. Executing CHECK pass (checking for obvious problems).
Checking module RegisterFile...
Found and reported 0 problems.

-- Writing to `build/mps/RegisterFile.prep.json' using backend `json' --

3. Executing JSON backend.

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: f2cdb90f7b, CPU: user 0.08s system 0.00s, MEM: 14.36 MB peak
Yosys 0.16 (git sha1 yosys-0.16, gcc 11.3.0 -fPIC -Os)
Time spent: 23% 4x opt_clean (0 sec), 21% 5x opt_expr (0 sec), ...
