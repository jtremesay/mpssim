
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.16 (git sha1 yosys-0.16, gcc 11.3.0 -fPIC -Os)


-- Parsing `rtl/mps/InstructionDecoder.v' using frontend ` -vlog2k' --

1. Executing Verilog-2005 frontend: rtl/mps/InstructionDecoder.v
Parsing Verilog input from `rtl/mps/InstructionDecoder.v' to AST representation.
Storing AST representation for module `$abstract\InstructionDecoder'.
Successfully finished Verilog frontend.

-- Running command `prep -top InstructionDecoder' --

2. Executing PREP pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\InstructionDecoder'.
Generating RTLIL representation for module `\InstructionDecoder'.

2.2.1. Analyzing design hierarchy..
Top module:  \InstructionDecoder

2.2.2. Analyzing design hierarchy..
Top module:  \InstructionDecoder
Removing unused module `$abstract\InstructionDecoder'.
Removed 1 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

2.3.4. Executing PROC_INIT pass (extract init attributes).

2.3.5. Executing PROC_ARST pass (detect async resets in processes).

2.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

2.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

2.3.8. Executing PROC_DFF pass (convert process syncs to FFs).

2.3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module InstructionDecoder.

2.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module InstructionDecoder.

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \InstructionDecoder..

2.6. Executing CHECK pass (checking for obvious problems).
Checking module InstructionDecoder...
Found and reported 0 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module InstructionDecoder.

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\InstructionDecoder'.
Removed a total of 0 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \InstructionDecoder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \InstructionDecoder.
Performed a total of 0 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\InstructionDecoder'.
Removed a total of 0 cells.

2.7.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \InstructionDecoder..

2.7.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module InstructionDecoder.

2.7.8. Finished OPT passes. (There is nothing left to do.)

2.8. Executing WREDUCE pass (reducing word size of cells).

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \InstructionDecoder..

2.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.11. Executing OPT pass (performing simple optimizations).

2.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module InstructionDecoder.

2.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\InstructionDecoder'.
Removed a total of 0 cells.

2.11.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \InstructionDecoder..

2.11.4. Finished fast OPT passes.

2.12. Printing statistics.

=== InstructionDecoder ===

   Number of wires:                  8
   Number of wire bits:            101
   Number of public wires:           8
   Number of public wire bits:     101
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  0

2.13. Executing CHECK pass (checking for obvious problems).
Checking module InstructionDecoder...
Found and reported 0 problems.

-- Writing to `build/mps/InstructionDecoder.prep.json' using backend `json' --

3. Executing JSON backend.

End of script. Logfile hash: f2c57002df, CPU: user 0.02s system 0.01s, MEM: 13.63 MB peak
Yosys 0.16 (git sha1 yosys-0.16, gcc 11.3.0 -fPIC -Os)
Time spent: 32% 4x opt_clean (0 sec), 32% 5x opt_expr (0 sec), ...
